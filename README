Makefile:
This file contains a ``make'' script for building the T programming language
compiler, and lexdbg (the standalone scanner to use for testing).  This script
also contains a clean target to remove all files generated by the build process.

scan.l:
This file contains the input to lex to create a scanner for the T programming 
language.

parse.y:
This file contains the input to yacc to create a parser for the T programming
language.

ast.h:
This header file contains typedef struct declarations for each AstNode type,
it also contains some enums for node tags and some expression operations.  There
are also function declarations for all of the make functions.

ast.c:
This file contains the c-source code for creating AstNodes.  There is a function
for each AstNode tag that will allocate, initialize and return a pointer to the
desired AstNode type.  The ast.c file uses memory allocation tracking provided
by the functions in mtrack to aid in preventing memory leaks.  
There is a _printNode function that takes a node and a seqnum.  The seqnum 
argument is used to keep track of the current sequence nest depth.  To call
this function use the printNode macro that takes only an AstNode*.

mtrack.h:
This header file contains function and struct declarations for the memory 
allocation tracking facility.  This header introduces the idea of a memassoc, 
or a memory association, that is a list of associated allocated memory.  Each
memory association can be allocated to, freed from, and has a function to 
free the entire memory association.  Mtrack provides a default memassoc.

mtrack.c:
This file contains the c-source code for the mtrack facility described in
the description for mtrack.h.

main.c:
This file contains the main function and its helper functions.  The main 
function sets up the parser input file stream to be either standard in (if there
was no commandline arguments), or the file named by the last commandline 
argument.  After setting up the input file stream, main calls the parser and
if the parser succeeds, it prints the AST.

literal.h:
This header file contains declarations for structures and functions that define
and operate on a literal type.  This type is essencially an integer literal
or a string literal and its purpose is to tie the data of the literal together
with the line number that it was scanned from.  Using this literal structure
instead of just the data for the literal the parser can get more accurate 
line numberings.

literal.c:
This file contains the implementation for the functions defined in literal.h.

type.h: 
This file contains structure and function declarations for representing and
manipulating types.

type.c:
This file contains the implementation for the functions defined in type.h.

class.h:
This header file contains function declarations for functions that build and
use the class list.

class.c:
This file contains the implementation for building, and using the class list.

list.h:
This header file contains function declarations for adding elements to a list
of void pointer data items.

list.c:
This file contains the implementation for the list functions defined in list.h

conversion.h:
This header file contains function declarations for checking the validity of
different types of conversions.

conversion.c:
This file contains the implementation for the functions declared in conversion.h

error.h:
This header file contains the function declaration for the error function.  The
error function takes a message string and a line number, the message is 
displayed along with an ``error message header'' containing the line number,
the program is then exited with the status 1 (error).

error.c:
This file contains the implementation for the error function.

symtab.h:
This header file contains the declaration for a Symbol and for functions to 
manipulate the main variable symbol table.  This symbol table is used for the 
main function body.

symtab.c:
This file contains the main variable symbol table and the implementation for 
functions declared in symtab.h.

analyze.h:
This header file contains the declaration for the analyze function.  The analyze
function recurses into the AST and performs symantic analysis on each node ofS
the tree.  The return value from the analyze function is a, potentially new,
pointer to the new root of the tree passed in as the argument.

analyze.c:
This file contains the implementation for the analyze function and its support
functions.

codegen.h:
This header file contains the function declarations for code generation 
functions.

codegen.c:
This source file contains the functions for the AST traversal that generates
intel x86 assembly for the T language program.

RTS.c:
This source file contains the implementation for the run time system functions.
